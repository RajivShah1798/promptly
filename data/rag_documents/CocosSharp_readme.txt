# CocosSharp

CocosSharp is an easy to use library for simple games using C# and F#.
It is a .NET port of the popular Cocos2D engine, derived from the
Cocos2D-X engine via Cocos2D-XNA.

This library is MIT licensed.

[![coverity][coverity-badge]][coverity-project]

[coverity-project]: https://scan.coverity.com/projects/6245
[coverity-badge]: https://scan.coverity.com/projects/6245/badge.svg

Website
-------

We have a dedicated website at [http://mono.github.io/CocosSharp](http://mono.github.io/CocosSharp). In particular,
check out the [contribute](http://mono.github.io/CocosSharp/contribute) section for how to be part of the CococsSharp community.

Forums
------

Xamarin is hosting forums for CocosSharp here:

http://forums.xamarin.com/categories/cocossharp

Learn More
----------

To learn more, see the https://github.com/mono/CocosSharp/wiki

License
-------

This project is open source, freely available, and free of royalties
or encumberance. The software is released under the highly permissive
MIT License.

Git
---

When you first check out, run

`git clone --recursive git@github.com:xamarin/CocosSharp`

so you will have all the submodules checked out for you.

With existing checkouts, run

`git submodule update --init --recursive`

to make sure you get the latest changes in the submodules. Repos that
were checked out recursively will do this automatically, but it
doesn't hurt to run this manually.

To pull external changes into a submodule

```
cd <submodule>   
git pull origin <branch>   
cd <top-level>; git add <submodule>   
git commit
```

To make changes in a submodule

`cd <submodule>`

   * By default, submodules are detached because they point to a specific commit. Use git-checkout to put yourself back on a branch.
   
`git checkout <branch>`

   work as normal, the submodule is a normal repo

```
git commit/push new changes to the repo (submodule)
cd <top-level>; git add <submodule> # this will record the new commits to CocosSharp MonoGame submodule
git commit
```

* To switch the repo of a submodule

   edit '.gitmodules' to point to the new location

`git submodule sync -- <path of the submodule> # updates .git/config`

   * I think this will checkout from the new location, internally. It may take a while for big repos.
   
```
git submodule update --recursive
git checkout <desired new hash> # This changes the pointer of the submodule
```

The desired output diff is a change in .gitmodule to reflect the
change in the remote URL, and a change in /<submodule> where you see
the desired change in the commit hash

You now have everything you need to start start developing with
CocosSharp

Getting Started
---------------
### Solutions & Projects - MonoGame

After clone you will need to generate the MonoGame projects.

The solution and project files are generated by [Protobuild](https://github.com/hach-que/Protobuild) when you double-click `Protobuild.exe` on Windows from or run `mono Protobuild.exe` under Mac OS or Linux.  
**Note: that the previous needs to be done in the MonoGame directory.**

To modify the projects you must edit the .definition file in the `Build/Projects/` folder and re-execute Protobuild.

For more information and advanced usage, please refer to the [Protobuild wiki](https://github.com/hach-que/Protobuild/wiki).

### Test Bed

We have created solutions for all the supported platforms that serves
as our TestBed for each platform.

You can find those in the [tests directory](https://github.com/xamarin/CocosSharp/tree/master/tests "Test Bed")

	CocosSharp.Tests.Android.sln	
	CocosSharp.Tests.Windows.sln	
	CocosSharp.Tests.Windows8.sln	
	CocosSharp.Tests.WindowsDX.sln	
	CocosSharp.Tests.WindowsGL.sln	
	CocosSharp.Tests.WindowsPhone.sln	
	CocosSharp.Tests.WindowsPhone7.sln	
	CocosSharp.Tests.iOS.sln
	CocosSharp.Tests.MacOS.sln	

### Samples

As the saying goes "A picture is worth a thousand words" well sample code can be just as effective.

So to get started we have placed a number of samples here: [Samples](https://github.com/xamarin/cocos-sharp-samples)

### Statistics

There is a special case for Xamarin iOS MonoTouch running on the simulator where they aggressively call garbage collection themselves.  This should not affect the devices though.  On the Simulator the GC label will always be 0 (zero)


History
-------

This project is a fork of the Cocos2D-XNA project, which is a port of
the C++-based Cocos2D-X API, which in turn is a cross-platform port of
the cocos2d-iphone project.  

The focus of this fork is to create a library that is idiomatically
correct for C# and remove many of the historical warts inherited from
the straight ports from C++ and Objective-C.
Contributing to CocosSharp
==========================

We encourage you to contribute to the CocosSharp repository. Your
involvement is important to the success of the project.

There are some style guidelines you must follow if you want your Pull
Request to be accepted:

1. Follow the .NET Design guidelines. 

2. Make use of partial classes to implement the platform specific
nuances of a feature.

3. Very little idiomatic coding, meaning no #if XYA #endif code
blocks.

4. Document your methods and features.

5. No magic numbers. Create const members for static literals and
document their use.

6. No unnecessary object instantiation to pass simple literals as
parameters.

7. Use CCxxx as your class names for framework classes.

8. Maintain the single level namespace "Cocos2D/ALL_CLASSES_HERE"

9. If you use our graphics, use them in the format that we give
you. You are allowed to use the graphics, logos, etc., but you can not
deface them or place your logo atop of our logos.

10. Solution files are CocosSharp.Platform.sln. Platform is named
such as Windows, WindowsGL, etc.

11. Project files are CocosSharp.Platform.csproj, see #10.

12. All output must go through CCLog.Log()

13. Assert only using Debug.Assert()

14. Your pull request must be atomic. Do not stack many bug fixes into
a single PR.

15. Avoid unnecessary virtual method signatures. Virtual methods are
significantly slower than non-virtual methods.

16. No self-factory patterns. Use typed constructors to create the
state of an object.

17. Use triangle strip if at all possible. Only use a triangle list
when you can't organize the polygons in a strip.

By following these rules, the framework will continue to grow in a
robust and stable manner that helps all of the developers to create
great software.
# Code of Conduct

This project has adopted the code of conduct defined by the Contributor Covenant
to clarify expected behavior in our community.

For more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).
Copyright (c) The Cocos2D-XNA Team
Copyright 2013, 2014 Xamarin Inc

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
..\..\tests\testsContent\Images\ball-hd.png
..\..\tests\tests\ball-hd.mask
..\..\tests\testsContent\Images\grossini.png
..\..\tests\tests\grossini.mask
Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.axml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable/
        icon.png

    layout/
        main.axml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called "R" 
(this is an Android convention) that contains the tokens for each one of the resources 
included. For example, for the above Resources layout, this is what the R class would expose:

public class R {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or R.layout.main 
to reference the layout/main.axml file, or R.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.
# CocosSharp v1.1.0.0 release notes
 
## Breaking changes 
 ---
* Previously, within the overridden <code>CCApplicationDelegate</code> classes users would specify the desired <code>CCWindow:SupportedDisplayOrientations</code>. For example,
<pre>
<code>
	public override void ApplicationDidFinishLaunching(CCApplication application, CCWindow mainWindow)
    {
		...
		mainWindow.SupportedDisplayOrientations = CCDisplayOrientation.Portrait;
		...
</code>
</pre>
* From v1.1.0.0 there is no longer a need to do this as the supported orientations will be determined from the platform-specific metadata (e.g. Info.plist for iOS).
* Additionally, the property setters for <code>CCWindow:SupportedDisplayOrientations</code> and <code>CCWindow.CurrentDisplayOrientation</code> no longer exist as certain platforms do not support programmatically setting these properties after initialisation and these setters previously did nothing. Thus, so that users aren't misled the setters have been removed.  



## Fixes and enhancements 
 ---
* [25](https://github.com/mono/CocosSharp/issues/25) Remove need to set supported orientations in overridden CCApplicationDelegate
* [24](https://github.com/mono/CocosSharp/issues/24) Mac: Full-screen app crashes
* [22](https://github.com/mono/CocosSharp/issues/22) iOS: Viewport not correctly set after orientation change
* [21](https://github.com/mono/CocosSharp/issues/21) CCSprite: ContentSize change after instantiation not working
* [16](https://github.com/mono/CocosSharp/issues/16) Latest MonoGame linking fails when deploying Android tests project to device
* [15](https://github.com/mono/CocosSharp/issues/15) Android: Graphics context being destroyed when Pausing/Resuming
* [14](https://github.com/mono/CocosSharp/issues/14) CCBox2dDraw constructor/draw calls don't accommodate for PTM_RATIO
* [12](https://github.com/mono/CocosSharp/issues/12) CCScene Layer property can be set
* [10](https://github.com/mono/CocosSharp/pull/10) CCNode: Fix loop in Visit() to not break on invisible children.
# CocosSharp v1.3.2.0 release notes

## Breaking changes 
 ---
None

## Key new features
 ---
### Async/await support for CCActions

<code>CCNode</code> now comes bundled with the methods

* <code>RunActionAsync(CCFiniteTimeAction action)</code>
* <code>RunActionsAsync(params CCFiniteTimeAction[] actions)</code>

that allows a user to chain together a sequence of <code>CCAction</code>'s with more general <code>Task</code> objects. e.g.

<pre>
<code>
async void MyAwesomeActionSequence()
{
	await node.RunActionAsync(myaction1);
	await Task.Delay(100);
	await node.RunActionAsync(myaction2);
}
</code>
</pre>

Note, that the traditional approach of using a <code>CCSequence</code> to run a list of finite-timed actions sequentially is still available. **Also, please be aware that asynchronous programming within a PCL will require the additional NuGet package <code>Microsoft.Bcl.Async</code> to be installed.**

### CCGeometryBatch

The new <code>CCGeometryBatch</code> provides a means of efficiently drawing primitive custom vertex/index data. e.g.

<pre>
<code>
void initialiseGeoBatch()
{
	CCGeometryBatch geoBatch = new CCGeometryBatch();
	
	// We will not clear the primitives after creating them
	// This will allow us to keep drawing the same over and over.
	geoBatch.AutoClearInstances = false;
	
	geoBatch.Begin();
	
	// Vertex buffer of length 3. Index buffer of length 3
	var item = geoBatch.CreateGeometryInstance(3,3);
	
	// Set the texture that will be used
	item.GeometryPacket.Texture = someTexture;
	
	// Setup the vertex data
	var vertices = item.GeometryPacket.Vertices;
	vertices[0].Colors = CCColor4B.White;
	vertices[1].Colors = CCColor4B.White;
	vertices[2].Colors = CCColor4B.White;

	vertices[0].TexCoords.U = 0;
	vertices[0].TexCoords.V = 0;
	vertices[1].TexCoords.U = 1;
	vertices[1].TexCoords.V = 0;
	vertices[2].TexCoords.U = 1;
	vertices[2].TexCoords.V = 1;

	vertices[0].Vertices.X = 0;
	vertices[0].Vertices.Y = 0;
	vertices[1].Vertices.X = 10;
	vertices[1].Vertices.Y = 0;

	vertices[2].Vertices.X = 10;
	vertices[2].Vertices.Y = 10;
	
	// Set the index data
	item.GeometryPacket.Indicies = new int[] { 2, 1, 0 };

	// Provide some additional transform
	item.InstanceAttributes.AdditionalTransform = rotation;

	geoBatch.End();
}

protected override void Draw()
{
	base.Draw();
	
	// Alternatively, if geoBatch.AutoClearInstances = true (which is default)
	// and our vertex/index data was dynamically changing we could
	// reload our geometry batch after each draw call
	
	geoBatch.Draw();
}

</code>
</pre>


 
## Fixes and enhancements 
 ---
* [151](https://github.com/mono/CocosSharp/pull/151) Cc tile map polylines and shapes -- thanks to [charliekilian](https://github.com/charliekilian)
* [150](https://github.com/mono/CocosSharp/issues/150) CCTileMap: Add support for reading TileMap with no encoding -- thanks to [charliekilian](https://github.com/charliekilian)
* [147](https://github.com/mono/CocosSharp/issues/147) TileMap cutting off large maps
* [146](https://github.com/mono/CocosSharp/issues/146) CCSplitCols and CCSplitRows GridActions not working.
* [145](https://github.com/mono/CocosSharp/issues/145) Add support for CCGridNode.
* [143](https://github.com/mono/CocosSharp/pull/143) Set SharedDrawManager to null when disposing -- thanks to [hig-ag](https://github.com/hig-ag)
* [142](https://github.com/mono/CocosSharp/issues/142) CCSprite: Setting TextureRectInPixels incorrectly resets ContentSize
* [141](https://github.com/mono/CocosSharp/issues/141) TileMap without encoding causes null reference exception
* [135](https://github.com/mono/CocosSharp/issues/135) Feature request: add async/await support for actions -- thanks to [Krumelur](https://gist.github.com/Krumelur)
* [134](https://github.com/mono/CocosSharp/issues/134) Add test to test loading TileMap from Stream issue 125
* [132](https://github.com/mono/CocosSharp/issues/132) Using CCRotateTo sometimes causes jerking back to previous state
* [131](https://github.com/mono/CocosSharp/issues/131) Scene Management methods are not called in correct order.
* [130](https://github.com/mono/CocosSharp/issues/130) CCRepeat won't end
* [129](https://github.com/mono/CocosSharp/issues/129) CocosSharp iOS test solution not building because of invalid configuration of Lindgren Networking
* [127](https://github.com/mono/CocosSharp/issues/127) Remove old samples from CocosSharp repo
* [126](https://github.com/mono/CocosSharp/issues/126) Drawing or Visiting a CCDrawNode to a CCRenderTexture on first draw outside of Scene Graph displays weird results.
* [125](https://github.com/mono/CocosSharp/issues/125) CCTiledMap - loading TMX file from Stream causes exception.
* [124](https://github.com/mono/CocosSharp/issues/124) CCSprite not working correctly with SamplerState.LinearWrap
* [123](https://github.com/mono/CocosSharp/issues/123) Drawing CCSprite to RenderTexture causes NRE
* [122](https://github.com/mono/CocosSharp/issues/122) CCRenderTexture Issues
* [119](https://github.com/mono/CocosSharp/issues/119) CCDrawNode and CCDrawPrimitives needs a way to draw their own geometry primitives
* [116](https://github.com/mono/CocosSharp/issues/116) CCRenderTexture: fetching Texture not working
* [115](https://github.com/mono/CocosSharp/issues/115) Mac NuGet package targets wrong platform
* [114](https://github.com/mono/CocosSharp/issues/114) Migrate GoneBananas iOS project to Unified
* [112](https://github.com/mono/CocosSharp/issues/112) Problem with GameAppDelegate.ApplicationDidFinishLaunching method
# CocosSharp v1.6.1.0 release notes 
## Key new features
 ---
### iOS9 support

This is a maintenance release to fix crashes and fix CCTextField to work correctly on iOS9.  
# CocosSharp v1.6.0.0 release notes 
## Key new features
 ---
### Windows 8.1 and Visual Studio 2015 support

With the release of Windows 10 and Visual Studio 2015 we have added support for Windows 8.1 CocosSharp projects.  Visual Studio 2015 no longer opens Windows 8.0 projects giving the opportunity to migrate to Windows 8.1.

### New project templates for Windows 8.1 that will load in Visual Studio 2015

Upgrade the templates to the latest release.

### Text Field input

A new class was added to support input for the supported platforms.  You can now use `CCTextField` to enable keyboard input.

To enable this you will create an instance of `CCTextField` and add it as a child to your Scene Graph.

                var textField = new CCTextField("[click here for input]",
                    "fonts/MarkerFelt",
                    22,
                    CCLabelFormat.SpriteFont);
    
                AddChild(textField);
    

There are different delegates you can subscribe to be notified when specific actions have happened:

            textField.BeginEditing += OnBeginEditing;
            textField.EndEditing += OnEndEditing;

For instance to scroll the text field up the screen when editing begins and scroll it back into position when editing ends:

            public override void OnEnter()
            {
                base.OnEnter();
    
                // define our scrolling actions
                scrollUp = new CCMoveTo(0.5f, VisibleBoundsWorldspace.Top() - new CCPoint(0, s.Height / 4));
                scrollDown = new CCMoveTo(0.5f, textField.Position);
    
            }
    
            private void OnEndEditing(object sender, ref string text, ref bool canceled)
            {
                ((CCNode)sender).RunAction(scrollDown);
            }
    
            private void OnBeginEditing(object sender, ref string text, ref bool canceled)
            {
                ((CCNode)sender).RunAction(scrollUp);
            }

There are also delegates that can be subscribed to that will notify the developer of keyboard show and hide events:

            void AttachListeners()
            {
                // Attach our listeners.
                var imeImplementation = trackNode.TextFieldIMEImplementation;
                imeImplementation.KeyboardDidHide += OnKeyboardDidHide;
                imeImplementation.KeyboardDidShow += OnKeyboardDidShow;
                imeImplementation.KeyboardWillHide += OnKeyboardWillHide;
                imeImplementation.KeyboardWillShow += OnKeyboardWillShow;
    
            }

`CCTextField` Samples include:

* [TextField](https://github.com/mono/cocos-sharp-samples/tree/master/TextField) in CocosSharp Samples
* [TextFieldTest](https://github.com/mono/CocosSharp/tree/master/tests/tests/classes/tests/TextInputTest) in our tests.  

The tests also show an example of customizing how the text field works by implementing a [custom IMEImplementation](https://github.com/mono/CocosSharp/blob/master/tests/tests/classes/tests/TextInputTest/TextInputTest.cs#L556).



### CCStats Enhancements

There were a few problems with CocosSharp's statistics not working correctly across all platforms. New `CCStats` uses a new font with more characters, which allows us to display even short descriptions of the values.

![](images/ccstats-2015-09-16.png)

### Windows Phone 8.1 `CCLabel`

CCLabel is now supported on Windows Phone 8.1.  There were multiple problems across devices were it did not work at all and are now fixed in this release.  

### Accelerometer

Support for accelerometer was added in this release for Windows Phone 8.1 and Windows 8.1.  

Also, just as a side note there was also a fix for iOS accelerometer [305](https://github.com/mono/CocosSharp/issues/305) [IOS] Accelerometer not responding.  It has popped up from time to time as a problem but the source of the problem was never tracked down until recently.  Read commit note for more information.

### GUI Extensions

Major overhaul of the [GUI extensions](https://github.com/mono/CocosSharp/tree/master/Extensions/GUI).  These have not been high priority so have been lagging behind.

Notable improvements
* All GUI elements now sport a new C# events interface.
* Major overhaul of CCScale9Sprite to bring it up to current functionality and render correctly.
* Removal of obsolete CCSpriteBatch where appropriate
* All other elements are now rendering correctly based on [our tests](https://github.com/mono/CocosSharp/tree/master/tests/tests/classes/tests/ExtensionsTest).


### Release Contributors

* Alex Sorokoletov - Fixed Windows Phone 8.1 orientation, also provided valuable feedback on Windows Phone 8.1 CCLabel support.
* Vincent Dondain - Upgrade of CocosSharp Xamarin Studio templates to use the new project wizard pages.
* Marius Ungureanu - Memory leaks and performance changes. 

## Breaking changes
 ---

### Windows 8.0 is no longer supported in our NuGet packages.

Due to the way NuGet packages it's support for netcore targets we can only provide one so Windows 8.0 support was replaced with Windows 8.1 assemblies.  For those relying on this support you can still compile from source and use the generated NuGets for Windows 8.0.

### Legacy support for iOS .xnb content assets generated by the pipeline.

Previously, MonoGame would try to load the generated .xnb even though it was not generated for iOS platform specifically.  Now you may have to rebuild these if they were not specifically targeting iOS platform.  We have seen this mostly with .spritefonts that are used.

So if you have a project that used to work with .xnb formatted assets and after upgrading there are loading problems try regenerating them  specifically targeting iOS platform.  

View the [CocosSharp Content Pipeline introduction](https://developer.xamarin.com/guides/cross-platform/game_development/cocossharp/content_pipeline/)

### Unified PCL NuGet changes

*  iOS
*  Android
*  Windows DX
*  Windows 8.1
*  Windows Phone 8.1
*  Windows Phone 8.0

This also includes changes to the PCL profiles that are supported.  If you have problems updating your PCL projects you will need to update the profile to include Windows 8.1 or the NuGet package will not install.

* Mac - .NETPortable Version=v4.5 Profile=Profile111
* Windows - .NETPortable Version=v4.5 Profile=Profile138

### SharpDX updates

This will only be a possible problem if you are referencing SharpDX in your own projects.  SharpDX was updated to the latest release across all platforms.

### Note on Windows 10 and Visual Studio 2015

There have been reports of difficulties getting MonoGame to compile on Visual Studio 2015 and Windows 10.  

We had a few problems getting MonoGame and by proxy CocosSharp to compile with Windows 10 and VS2015.

Ran into this obscure problem with only Visual Studio 2015 installed on Windows 10 - https://social.msdn.microsoft.com/Forums/sqlserver/en-US/8cb70b42-c45c-4d2c-989c-6affa2a88343/w81netcore-error-message-when-building-win81-app-on-win10?forum=wpdevelop which prevented any of the MonoGame projects to build on Visual Studio 2015. Even deleting the lock file it still showed the same problems. Thus ensued more uninstalls of VS and finally an install of VS 2013 community edition which still did not help. Turns out that you can not just do a repair or anything you have to un-install VS 2015 completely AND REBOOT the windows 10 then install VS 2015 from scratch WITH VS 2013 community edition ALREADY installed. Make sure the project.lock.json file is deleted and once all this dancing is done it looks like MG projects are able to be compiled and run.



## Fixes and enhancements 
 ---
* [309](https://github.com/mono/CocosSharp/issues/309) CCGeometryNode NRE if Packet Texture is null
* [308](https://github.com/mono/CocosSharp/issues/308) CCGeometryNode only has support for TriangleList primitive types
* [305](https://github.com/mono/CocosSharp/issues/305) [IOS] Accelerometer not responding
* [304](https://github.com/mono/CocosSharp/issues/304) Application.CurrentOrientation is always CCDisplayOrientation.Default
* [303](https://github.com/mono/CocosSharp/issues/303) Accelerometer support for WP8.1 and Windows8.1
* [301](https://github.com/mono/CocosSharp/pull/301) Add coverity badge
* [300](https://github.com/mono/CocosSharp/pull/300) Some coverity fixes
* [299](https://github.com/mono/CocosSharp/pull/299) Fix memory leak on Win-based systems when loading Tiffs.
* [298](https://github.com/mono/CocosSharp/issues/298) Windows 8.1/WinRT/XAML platforms do not use the search paths to load .TTF fonts.
* [297](https://github.com/mono/CocosSharp/pull/297) Add nowarn on CS1591 for cleaner output.
* [296](https://github.com/mono/CocosSharp/pull/296) Fix memory overhead - Thanks Marius Ungureanu
* [295](https://github.com/mono/CocosSharp/issues/295) CCContentManager.SharedContentManager.GetAssetStreamAsBytes(fontName, out fontName); cause too much memory overhead
* [294](https://github.com/mono/CocosSharp/issues/294) Cross-platform PCL project errors out when referencing MonoGame.
* [293](https://github.com/mono/CocosSharp/issues/293) Way to copy CCDrawNode or duplicate the line lists and triangle lists
* [292](https://github.com/mono/CocosSharp/issues/292) CCSprite: Add HalfTexelOffset property
* [291](https://github.com/mono/CocosSharp/issues/291) [Win8.1 and VS 2015 support] Windows 8.1 and Windows 8.1 XAML projects to templates to replace the Windows 8 templates
* [289](https://github.com/mono/CocosSharp/issues/289) Xamarin Studio templates don't work
* [287](https://github.com/mono/CocosSharp/issues/287) CCDrawNode.DrawPolygon shows seams between polygons when they are close together.
* [286](https://github.com/mono/CocosSharp/issues/286) CCEaseSineIn Odd Behavior
* [285](https://github.com/mono/CocosSharp/issues/285) Windows 10 - "Unable to load mfplat.dll"
* [284](https://github.com/mono/CocosSharp/issues/284) CCNode: ZOrder property not correctly updated after set
* [283](https://github.com/mono/CocosSharp/issues/283) Crash on iOS with CCTransitionFade 
* [282](https://github.com/mono/CocosSharp/issues/282) CCRandom throwing Overflow exception on 4S devices.
* [280](https://github.com/mono/CocosSharp/pull/280) CCTextField implemenation
* [279](https://github.com/mono/CocosSharp/issues/279) WP8.1: CCRenderTexture.SaveToStream results in black image
* [278](https://github.com/mono/CocosSharp/issues/278) WP8.1: Bad performance when using CCLabel SystemFont
* [277](https://github.com/mono/CocosSharp/issues/277) CCSprite UntrimmedSizeInPixels not working correctly.
* [276](https://github.com/mono/CocosSharp/issues/276) Error using Schedule from CCScene.
* [275](https://github.com/mono/CocosSharp/issues/275) CCNode.Visit() using CCRenderTexture results in all black texture
# CocosSharp v1.2.1.0 release notes 

## Breaking changes 
 ---
None

## Key new feature: TexelToContentSizeRatio/s
 ---
When loading assets such as sprites the <code>ContentSize</code> defaults to the texel dimensions of the original image. However, this becomes problematic when developers wish to include high/low-def variants of their images when targeting different screen resolutions but who wish to maintain a consistent content size. To accommodate for this we have introduced the static properties <code>TexelToContentSizeRatios<code> of type <code>CCSize</code> and the <code>TexelToContentSizeRatio</code> of type <code>float</code> to allow users to adjust the scale of conversion between texels to content size. These properties are available hierarchically throughout a number of classes - namely,

* CCApplication
    * CCSprite
    * CCTMXLayer
    * CCLabelTTf
    * CCLabelBMFont

To use these properties, within the overridden <code>CCApplicationDelegate</code> one could do the following

<pre>
<code>
    public override void ApplicationDidFinishLaunching(CCApplication application, CCWindow mainWindow)
    {

        // Other initialisation
        // ...
        CCSize windowSize = mainWindow.WindowSizeInPixels;

        float desiredWidth = 1024.0f;
        float desiredHeight = 768.0f;

        // This will set the world bounds to be (0,0, w, h) - ContentSize is relative to these dimensions
        mainWindow.SetDesignResolutionSize(desiredWidth, desiredHeight, CCSceneResolutionPolicy.ShowAll);

        if (desiredWidth < windowSize.Width)
        {
            application.ContentSearchPaths.Add("images/hd");
            CCSprite.DefaultTexelToContentSizeRatio = 2.0f;
        }
        else
        {
            application.ContentSearchPaths.Add("images/ld");
            CCSprite.DefaultTexelToContentSizeRatio = 1.0f;
        }

        // ...
</code>
</pre>

Also, the Xamarin Studio project templates have been updated to incorporate these changes so you'll be able to quickly setup a project to handle multiple screen resolutions.


## Fixes and enhancements 
 ---
* [60](https://github.com/mono/CocosSharp/issues/60) XS Project Templates: Showcase new TexelToContentSizeRatio feature
* [59](https://github.com/mono/CocosSharp/issues/59) Visibility of added children are not being recursively set from parent.
* [58](https://github.com/mono/CocosSharp/issues/58) Issues with NuGets in Templates (Mobile Apps -> Empty Project)
* [51](https://github.com/mono/CocosSharp/issues/51) CCLabel: offset issue
* [50](https://github.com/mono/CocosSharp/issues/50) CCSprite: Add TexelToContentSizeRatio
* [49](https://github.com/mono/CocosSharp/issues/49) CCSimpleAudioEngine: Small music file plays twice
# CocosSharp v1.5.0.0 release notes

## Key new features
 ---

### Unified PCL NuGet

We have removed the confusion of offering multiple NuGet packages for each distinct platform. Instead, from this release onwards we will simply provide a single PCL NuGet &mdash; namely, __CococsSharp.PCL.Shared.nupkg__, which, aside from other PCL's, can be referenced within the following platform-specific projects:

*  iOS
*  Android
*  Windows DX
*  Windows 8
*  Windows Phone 8.1
*  Windows Phone 8.0 



__Note__: If you're migrating from an existing CocosSharp project that references a platform-specific NuGet (e.g. CocosSharp.iOS.1.4.0.0.nupkg), then you'll need to explicitly remove the old package and then subsequently add CococsSharp.PCL.Shared.1.5.0.0.nupkg.


### Renderer pipeline

We have overhauled the way CocosSharp performs rendering, with a focus on improved performance. Please check out this article [here](link_to_forum_post) for an in-depth discussion on the design of our renderer pipeline and what it means for developers.

### Templates

Xamarin Studio and Visual Studio (VS) templates have been updated with the latest PCL package for this release. In particular, we now have VS project templates for:

* Windows Phone 8.1
* Mobile
  * Portable (PCL) - Android, iOS and Windows Phone 8.1
  * Shared project - Android, iOS and Windows Phone 8.1

Details on how to access project templates for Xamarin Studio or Visual Studio can be found [here](https://forums.xamarin.com/discussion/26822/cocossharp-project-templates-for-xamarin-studio) and [here](http://forums.xamarin.com/discussion/30701/cocossharp-project-templates-for-visual-studio) respectively.

## Breaking changes
 ---

* Unfortunately, while offering a single unified PCL package simplify things greatly, there are some technical limitations and trade-offs. Specifically, our offering is currently unable to target __classic Mac and Windows GL projects__. However, in the future, CocosSharp packages will support Unified Mac projects so please keep that in mind.


* Due to the inclusion of the new renderer pipeline, __<code>CCSpriteBatchNode</code> has been marked obsolete__, however to avoid confusion will be omitted entirely in future releases. Please see the article [here](link_to_forum_post) for details on how to migrate away from this class.


* __<code>CCRenderTexture</code> is longer derived from <code>CCNode</code>__. Previously, <code>CCRenderTexture</code> served a dual role where it could both be attached to the scene-graph or used externally, with the corresponding <code>Sprite</code> instead added to a scene. For example

<pre>
<code>
CCRender renderTexture;
CCSprite renderTexSprite;

// Initialise render texture

renderTexture.Begin();
// Draw into texture
renderTexture.End();

// Previously, could add texture to a parent node
parentNode.AddChild(renderTexture);


// Alternatively, get corresponding sprite and add that
// This is the approach to use from v.1.5.0.0 onwards
renderTexSprite = renderTexture.Sprite;
parentNode.AddChild(renderTexSprite);
</code>
</pre>

So in CocosSharp v1.5.0.0 onwards we have simply removed the ability to add a render texture to a parent node, which is consistent with the role it serves.

* __Attach <code>CCGeometryBatch</code> to scene and rename to <code>CCGeometryNode</code>__. To integrate with our new renderer pipeline, <code>CCGeometryBatch</code> is now derived from <code>CCNode</code> and needs to be attached to a parent node to be renderable. To emphasise this change in behavior, we renamed <code>CCGeometryBatch</code> to <code>CCGeometryNode</code>. Migrating to use <code>CCGeometryNode</code> should be relatively straight-forward. For example

<pre>
<code>
	
// Create node and add to parent
CCGeometryNode geoNode = new CCGeometryNode();
parentNode.AddChild(geoNode);

// Thereafter, setting up drawing geometry should be exactly the same as with CCGeometryBatch

// e.g. Create geom instance with 3 vertices and 3 indices
CCGeometryInstance geomInstance = geoBatch.CreateGeometryInstance(3, 3);

// Populate instance as with CCGeometryBatch


// No need to explicitly flush render commands
// By being added to the scene-graph, rendering is performed implicitly!

</code>
</pre>


* __<code>CCDrawPrimitives</code>__ has now been marked obsolete. Users should instead make use of the pre-existing <code>CCDrawNode</code> class which integrates with the new renderer pipeline, or alternatively use <code>CCGeometryNode</code> to construct more customisable primitives.

* __Effects:__ During the Renderer Pipeline modifications we made changes to all the effects that use a GridBase, examples being <code>CCLiquid</code>, <code>CCShaky</code> etc.  Any of these GridBase effects will need to target a <code>CCNodeGrid</code>.  To do that add the <code>CCNode</code> that will be targeted to an instance of a <code>CCNodeGrid</code>.  This breaking change greatly simplifies the rendering code and our source code base.  Every rendering loop there were checks for Grid usage even when not being used which resulted in unnessasary processing cycles and making the rendering source hard to manage. The following demonstrates how to run an <code>Effect</code> targeting a <code>CCSprite</code> that is wrapped in a <code>CCNodeGrid</code>.

<pre>
<code>

// Define our Effect Action
var fadeOut = new CCFadeOutBLTiles(1f, new CCGridSize(10, 10));

// Create a target CCNodeGrid because the FadeOutBLTiles uses a grid
var targetNode = new CCNodeGrid();
AddChild(targetNode);

// Create our sprite
var sprite = new CCSprite("grosinni");
sprite.Position = this.ContentSize.Center;

// our sprite needs to be wrapped in a CCNodeGrid
targetNode.AddChild(sprite);

// Run the action against the wrapping CCNodeGrid targetNode 
targetNode.RunAction (fadeOut);
</code>
</pre>

* __v.1.4.0.0 reminder__: Usage of the obsolete <code>CCLabelBMFont</code> and <code>CCLabelTtf</code> classes should be replaced with unified label class <code>CCLabel</code> (see [here](http://forums.xamarin.com/discussion/37873/cocossharp-v1-4-0-0-release)). These obsolete classes will be removed in future releases!

## Fixes and enhancements 
 ---
* [241](https://github.com/mono/CocosSharp/issues/241) CCSpriteFrameCache.RemoveSpriteFrames does not remove frames
* [240](https://github.com/mono/CocosSharp/issues/240) Layering CCLayerGradient doesn't obey ContentSize, Opacity, or Gradient
* [239](https://github.com/mono/CocosSharp/issues/239) Typo in parameter name in CCLayer's Visit() &mdash; thanks to [Krumelur](https://github.com/Krumelur)
* [238](https://github.com/mono/CocosSharp/issues/238) CocosSharp templates do not appear in Xamarin Studio on Windows &mdash; thanks to [vchelaru](https://github.com/vchelaru)
* [237](https://github.com/mono/CocosSharp/issues/237) CocosSharp Wrench .nuspec for signed assemblies
* [236](https://github.com/mono/CocosSharp/issues/236) CCDrawNode: Bounding Rectangle
* [235](https://github.com/mono/CocosSharp/issues/235) CCDrawNode incorrect calculation of ContentSize Height.
* [234](https://github.com/mono/CocosSharp/issues/234) Xamarin Studio CocosSharp templates should link against the latest NuGet &mdash; thanks to [vchelaru](https://github.com/vchelaru)
* [233](https://github.com/mono/CocosSharp/issues/233) PCL: Box2D.Dynamics.b2World could not be loaded
* [232](https://github.com/mono/CocosSharp/issues/232) Windows Cross-platform PCL project template for mobile devices.
* [231](https://github.com/mono/CocosSharp/issues/231) NuGet .nuspec definitions need to be changed to use -BasePath
* [230](https://github.com/mono/CocosSharp/issues/230) CocosSharp should support Visual Studio 2015 templates
* [228](https://github.com/mono/CocosSharp/issues/228) Implement renderer pipeline
* [227](https://github.com/mono/CocosSharp/issues/227) CocosSharp Windows Store template has error when created
* [226](https://github.com/mono/CocosSharp/issues/226) Windows Phone 8.1 templates
* [225](https://github.com/mono/CocosSharp/issues/225) Overhaul CCLayerMultiplex
* [220](https://github.com/mono/CocosSharp/issues/220) CCScene: Actions run on base scene do not work correctly
* [219](https://github.com/mono/CocosSharp/issues/219) CCSprite: Add convenience methods to reset texture rect region
* [218](https://github.com/mono/CocosSharp/issues/218) CCLabel : System Font Label layout differences between different Android versions 17,19 and 21
* [217](https://github.com/mono/CocosSharp/issues/217) CCLabel: Labels are causing flickering on Android Devices
* [216](https://github.com/mono/CocosSharp/issues/216) Replace internal zip implementation with MonoGame.Utilities implementation 
* [214](https://github.com/mono/CocosSharp/issues/214) CCTileMapLayer: Correct culling when local transform is not identity  
* [213](https://github.com/mono/CocosSharp/issues/213) Setting CCLabel.IsAntialiased = false throws NullReferenceException
* [211](https://github.com/mono/CocosSharp/issues/211) Curious artifacts with a CCLabel on top of a CCSprite
* [210](https://github.com/mono/CocosSharp/issues/210) TileMaps: Allow reading in of native external tsx files &mdash; thanks to [vchelaru](https://github.com/vchelaru)
* [208](https://github.com/mono/CocosSharp/issues/208) Rename CCGeometryBatch to CCGeometryNode
* [207](https://github.com/mono/CocosSharp/issues/207) CCGeometryBatch: Attach to scene graph
* [205](https://github.com/mono/CocosSharp/pull/205) CCTileMapLayer: Add support for multiple tile-sets &mdash; thanks to [gdwneo](https://github.com/gdwneo)
* [204](https://github.com/mono/CocosSharp/pull/204) CCTouch.StartLocation has correct value after constructor &mdash; thanks to [KalitaAlexey](https://github.com/KalitaAlexey)
* [202](https://github.com/mono/CocosSharp/issues/202) CCLabel: wrong color after fade animation
* [201](https://github.com/mono/CocosSharp/issues/201) Resetting properties of a CCNode when accessing it in CCLabel
* [200](https://github.com/mono/CocosSharp/issues/200) Render a CCLabel in a CCTextureRender causes NRE
* [199](https://github.com/mono/CocosSharp/issues/199) VS: Unable to install project templates
* [198](https://github.com/mono/CocosSharp/pull/198) Fix: Wrong rendering of hex tileset (handles #197) &mdash; thanks to [omd](https://github.com/omd)
* [196](https://github.com/mono/CocosSharp/issues/196) CCRenderTexture: Detach from scene graph
* [192](https://github.com/mono/CocosSharp/issues/192) Can't animate CCLabel by Opacity
* [191](https://github.com/mono/CocosSharp/issues/191) CCNode: Clean up z-ordering
* [186](https://github.com/mono/CocosSharp/pull/186) SearchResolutionOrder and SearchPaths contain at least empty string &mdash; thanks to [KalitaAlexey](https://github.com/KalitaAlexey)
* [184](https://github.com/mono/CocosSharp/issues/184) Unnecessary complexity and clearing stack at TileContainer
* [183](https://github.com/mono/CocosSharp/issues/183) CCSpriteFontCache InternalLoadFont wrong algorithm
* [181](https://github.com/mono/CocosSharp/issues/181) NullReferenceException on attempt create sprite font
* [180](https://github.com/mono/CocosSharp/issues/180) CCLabel Descendants property needs to be marked as non public
* [179](https://github.com/mono/CocosSharp/issues/179) XML files should be distributed with CocosSharp templates
* [177](https://github.com/mono/CocosSharp/issues/177) Signing of CocosSharp via Wrench.
* [174](https://github.com/mono/CocosSharp/issues/174) CCSprite (and CCNode) Rotation opposite of mathematical rotation
* [173](https://github.com/mono/CocosSharp/issues/173) CCLabel does not display alpha correctly on Android
* [164](https://github.com/mono/CocosSharp/issues/164) Setting PositionX of CCRenderTexture results in wobbling on iPhone devices
* [118](https://github.com/mono/CocosSharp/issues/118) WP8: CCSprite with PNG stream exception
* [81](https://github.com/mono/CocosSharp/issues/81) RemoveSpriteFrame

## What is it?

In CocosSharp v.1.5.0.0 we have overhauled the way we perform rendering, with a focus on improved performance. Our implementation was inspired by cocos2d-x v.3's renderer [pipeline](http://www.cocos2d-x.org/docs/manual/framework/native/v3/new-renderer/en), but is by no means a one-for-one port as described below.


## Background

A CocosSharp game comprises of a root <code>CCScene</code> object along with a subsequent chain of <code>CCNode</code> children &mdash; the so-called <em>scene graph</em>. Starting a game initialises a run-loop that periodically calls the scene's <code>Visit</code> method, that in-turn traverses through the entire scene-graph, calling <code>Visit</code> on all node children as represented schematically in the diagram below.

![Scene traversal](https://raw.githubusercontent.com/mono/CocosSharp/develop/ReleaseNotes/RendererPipelineNotesContent/SceneTraversal.png "Scene traversal")

Previously, rendering was performed within a node's <code>Visit</code> method and thus the number of draw calls grew linearly with the number of nodes in a given scene. This is very much a naive approach to rendering as it doesn't leverage the possibility that the rendering of adjacent nodes can be grouped together into a single draw call. For instance, looking at our sample scene-graph, we notice that our children sprites can be grouped into two, with each group sharing the same underlying texture. Now, drawing a sprite essentially consists of specifying the quad vertices and texture region. Hence, for each group of sprites, if we batch all these quads together we can draw all of them with a <em>single</em> draw call. This was precisely the role of <code>CCSpriteBatchNode</code>. A user would add common sprites as children to the batch node to reduce the number of draw calls. But this class is bundled with a few problems:

* Not every user was aware of this class' existence!

* It broke the ordering of a scene-graph. The implicit pre-condition of using the <code>CCSpriteBatchNode</code> was that it assumed that the child sprites you were adding to it were adjacent to one another, however there was no way to enforce this. For example, suppose we had the following scene-graph

![SpriteBatch scene breaking](https://raw.githubusercontent.com/mono/CocosSharp/develop/ReleaseNotes/RendererPipelineNotesContent/SpriteBatchSceneBreaking.png "SpriteBatch scene breaking")

The problem is that because the grouped sprites will all be drawn together, we have now broken the ordering of the scene-graph. Ultimately <code>CCSpriteBatchNode</code> is not in and of itself truly a renderable object and has no place being part of the scene-graph.

* No support for sorting by depth. Virtually all sprites will contain some amount of transparency and so correct ordering when using depth-testing is critically important to avoid any rendering artefacts (see the upcoming "Depth testing and changes to z-ordering" section for an example of this).

* Clunky code under the hood. Supporting <code>CCSpriteBatchNode</code> made the code-base, particularly, <code>CCSprite</code>, quite clumsy as it had to support this dual role of being in charge of its own rendering or potentially delegating that responsibility to its parent <code>CCSpriteBatchNode</code>.

## Motivation

With the previous background in mind, the primary motivation for the new renderer pipeline was to eliminate the problems and limitations of <code>CCSpriteBatchNode</code>. In particular, we now have the new <code>CCRenderer</code> class that maintains a render queue that is associated with a given scene. When traversing a scene-graph and calling <code>Visit</code> on a give node, rather than performing the drawing then and there, instead a corresponding <code>CCRenderCommand</code> is passed to the renderer. Once the entire scene-graph has been visited, the render queue is then sorted (based on traits of the render command such as order of arrival, depth, material id) and then the render commands are processed as seen below.

![Renderer](https://raw.githubusercontent.com/mono/CocosSharp/develop/ReleaseNotes/RendererPipelineNotesContent/RendererSteps.png "Renderer")

The main benefit is that sprite render commands adjacent to one another in the queue that share the same texture (more precisely the same texture and blending options) will be processed concurrently &mdash; that is, we get automatic batching on the fly <em>without</em> the need for <code>CCSpriteBatchNode</code>! Moreover, if a user is making use of depth-testing (see upcoming section), we further get correct depth-ordering as well!

Keep in mind that sprites don't necessarily have to be exactly the same to leverage this benefit. As long as they share the same texture, then automatic batching will be performed. This is particularly true when using sprite-sheets.

## How to use it?

Thankfully, in the majority of cases, making use of the new renderer pipeline should be almost automatic. If you previously haven't used <code>CCSpriteBatchNode</code> in your code, then these new changes should work right out of the box. If you have made use of <code>CCSpriteBatchNode</code>, then migration should be simple &mdash; just remove usage of it! For example,

<pre>
<code>
CCNode parent;
CCSpriteBatchNode batchNode;
CCSprite sprite;

// Instantiate nodes accordingly

// Previously

parent.AddChild(batchNode);
batchNode.AddChild(sprite);

// Now

parent.AddChild(sprite);
</code>
</pre>

Note that in CocosSharp v1.5.0.0, <code>CCSpriteBatchNode</code> has been marked obsolete, but to avoid confusion will be removed entirely in future releases.


## Adding custom drawing

As drawing is not performed immediately, the virtual method <code>CCNode:Draw</code> is no longer relevant. Instead, if you have subclassed <code>CCNode</code> and overridden <code>Draw</code> to provide some custom drawing logic, then you can migrate to use the renderer by making use of the <code>CCCustomCommand</code> render command. For example,

<pre>
<code>

CCCustomCommand renderCommand;

public MyNode()
{
	renderCommand = new CCCustomCommand(RenderNode);
	
	// Other initialisation
}

// Called when visiting the node
protected override void VisitRenderer(ref CCAffineTransform worldTransform)
{
    base.VisitRenderer(ref worldTransform);
	
	// Give the render command the global depth for depth-ordering (if used)
	// i.e. if Window.IsUseDepthTesting = true
	renderCommand.GlobalDepth = worldTransform.Tz;
	
	// Provide the world transform which will be set when processing render command
    renderCommand.WorldTransform = worldTransform;

	Renderer.AddCommand(renderCommand);
}

// Called by renderer when it's time to process command
// All drawing commands will be relative to the world transform passed in VisitRenderer
void RenderNode()
{
	// Perform custom drawing
}
</code>
</pre>

__Warning:__ It should be extremely rare that you will need to provide your own custom drawing logic. All nodes are linked up the renderer, so by adding them to the scene-graph they will automatically have corresponding render commands associated with them without any user intervention. 

Currently, the only valid use case for providing custom drawing is if a user is making use of <code>CCDrawingPrimitives</code> that provides a static interface for drawing primitive shapes. However, this class has since been superseded by <code>CCDrawNode</code> which is derived from <code>CCNode</code> and hence connected to the renderer. While <code>CCDrawingPrimitives</code> is currently marked as obsolete, future releases of CocosSharp will omit this class entirely and so we recommend users migrate over to <code>CCDrawNode</code> as soon as possible.


## Visiting in a render texture

Users should also be aware of the new <code>CCNode</code> method <code>public virtual void Visit(ref CCAffineTransform parentWorldTransform)</code>. This method is used internally when traversing the scene-graph but an added benefit is that it gives the user a lot more flexibility when attempting to render a node into a <code>CCRenderTexture</code> by supplying an alternate transform. For example,

<pre>
<code>
	
CCRenderTexture renderTexture;
CCNode parentNode;
CCNode childNode;

// Initialise render texture and node

parentNode.AddChild(childNode);

CCAffineTransform transform = parentNode.AffineWorldTransform;

renderTexture.Begin();
// Draw into render texture
// Use the true parent's world transform
// This corresponds to the exact same transform used when traversing the scene-graph
childNode.Visit(ref transform);
renderTexture.End();


// Alternatively, our render texture dimensions may not correspond with the entire scene
// and we may wish to supply an alternate parent transform 

// Create a transform that simply translates by 20 along the x-axis
CCAffineTransform transform2 = CCAffineTransform.Identity;
transform2.Tx = 20.0f;

renderTexture.Begin();
childNode.Visit(ref transform2);
renderTexture.End();

</code>
</pre>

In this way, render textures now support a software-side <em>instancing</em> of nodes.

__Warning:__ There is a slight nuance that needs to be highlighted. The transform provided in <code>Visit(ref transform)</code> is the <em>parent</em> world transform, not the node's transform itself. Internally, this method will concatenate the passed in transform with the node's local transform (based on the node's position, scale, rotation etc.) to calculate the node's world transform.

Remember, the <em>local</em> transform is relative to a node's parent, while the <em>world</em> transform is relative to the entire layer.


## Depth testing and changes to z-ordering

Finally, we have overhauled the usage of <code>CCNode</code> z-ordering to more cleanly integrate with our renderer's sorting of render commands. Previously, <code>CCNode</code> contained a suite of z-ordering properties &mdash; namely, <code>ZOrder</code>, <code>LocalZOrder</code>, <code>GlobalZOrder</code> along with the internal <code>COrderOfArrival</code>. Aside from adding confusion, the new renderer pipeline has made all these different flavors of ordering obsolete. Instead, we now have the single property <code>int:ZOrder</code>, that simply orders node siblings by ascending order. In this way, the sibling with lowest <code>ZOrder</code> will be processed before all others. 

__Warning:__ Remember, <code>ZOrder</code> has nothing to do with the geometric depth of a node. It's simply an ordering amongst siblings. If you want to actually alter the z-position of node, then use the <code>VertexZ</code> property.

__Warning:__ The one caveat when ordering is when we have a collection of siblings with non-uniform depth (i.e. different <code>VertexZ</code> property values) and a user is making use of depth-testing. For example, consider the following scene

![ZOrdering vs depth ordering](https://raw.githubusercontent.com/mono/CocosSharp/develop/ReleaseNotes/RendererPipelineNotesContent/ZOrderVsDepthOrder.png "ZOrdering vs depth ordering")

At this point, there is a disagreement between the depth and z-ordering, so the Renderer has to make a choice. In particular, for our implementation, __depth-ordering is prioritised over z-ordering__. The motivation is that a geometric ordering is the more appropriate choice to dynamically alter the render ordering of nodes that may be moving around in world. Below is a video showcasing this idea

<script src="http://vjs.zencdn.net/4.0/video.js"></script>

<video id="depth_ordering" class="video-js vjs-default-skin" controls
preload="auto" width="683" height="384"
data-setup="{}">
<source src="https://raw.githubusercontent.com/mono/CocosSharp/develop/ReleaseNotes/RendererPipelineNotesContent/DynamicDepthOrdering.mp4" type='video/mp4'>
</video>

## Conclusion

Ultimately, the aim of the new renderer pipeline is to help lessen the developer's burden of optimising and to spend more time on game content. Nonetheless, developers do need do need to be mindful of how to structure their scenes to maximise these performance gains &mdash; particularly to understand when the renderer will automatically batch a collection of sprites. Hopefully this article has helped to equip developers with precisely this information.

## Examples

Below are some sample screenshots showcasing the observed performance gains. In particular, the highlighted statistics show the change in the number of draw counts before and after the integration of the renderer pipeline.

![MainMenuBeforeAfter](https://raw.githubusercontent.com/mono/CocosSharp/develop/ReleaseNotes/RendererPipelineNotesContent/MainMenuBeforeAfter.png "MainMenuBeforeAfter")

![LabelBeforeAfter](https://raw.githubusercontent.com/mono/CocosSharp/develop/ReleaseNotes/RendererPipelineNotesContent/LabelBeforeAfter.png "LabelBeforeAfter")

# CocosSharp v1.3.0.0 release notes

## Breaking changes / new features
---

* Overhaul of tile-map support. See [here](http://forums.xamarin.com/discussion/30568/cocossharp-v1-3-0-0-tile-map-support-overhaul-release-notes#latest) for in-depth details

* <code>CCWindow:SetDesignResolutionSize</code> has been marked obsolete and is replaced by the static method

<pre>
<code>
CCScene.SetDefaultDesignResolution(float width, float height, CCSceneResolutionPolicy resolutionPolicy)
</code>
</pre>

This change was motivated by issue [79](https://github.com/mono/CocosSharp/issues/79) that highlighted that certain resolution policies may result in changes to a scene's design resolution that differ from the default resolution specified by a user.

## Fixes and enhancements 
 ---
* [90](https://github.com/mono/CocosSharp/issues/90) Windows templates need to be incorporated into a single deliverable
* [89](https://github.com/mono/CocosSharp/issues/89) Overhaul Tile map support
* [88](https://github.com/mono/CocosSharp/issues/88) CCLayerColor: quad can obscure child nodes
* [87](https://github.com/mono/CocosSharp/issues/87) iOS 8.1: iPad rotation not working correctly
* [86](https://github.com/mono/CocosSharp/issues/86) CCSceneResolutionPolicy not respected
* [85](https://github.com/mono/CocosSharp/pull/85) Set property DeviceManager (thanks to hig-ag)
* [80](https://github.com/mono/CocosSharp/issues/80) CCScene: Should keep track of its own design resolution size
* [79](https://github.com/mono/CocosSharp/issues/79) CCWindow.SetDesignResolutionSize with FixedWidth/FixedHeight distorts game view
* [71](https://github.com/mono/CocosSharp/issues/71) Templates for Visual Studio for non mobile platforms
* [70](https://github.com/mono/CocosSharp/issues/70) XS Template build needs to be incorporated into build process
* [69](https://github.com/mono/CocosSharp/issues/69) CocosSharp XS Android Template creates unnecessary source items
* [67](https://github.com/mono/CocosSharp/issues/67) Templates for Visual Studio
* [66](https://github.com/mono/CocosSharp/issues/66) Memory Leak in CCNode
* [65](https://github.com/mono/CocosSharp/issues/65) CCShaky3D: strange behavior with HD textures and child elements
* [63](https://github.com/mono/CocosSharp/pull/63) Fixed null reference exception in CCRenderTexture
* [61](https://github.com/mono/CocosSharp/issues/61) CCRenderTexture.Begin() throws Null reference exception
* [56](https://github.com/mono/CocosSharp/issues/56) CCSpriteBatchNode resetting to position (0,0)
* [54](https://github.com/mono/CocosSharp/issues/54) CCTXTileMap: Scrolling issue
* [52](https://github.com/mono/CocosSharp/issues/52) Integrate CocosSharp content building in MonoGame pipeline tool
# CocosSharp v1.2.0.0 release notes

## Breaking changes 
 ---
* <code>CCViewportResolutionPolicy</code> has now been removed. This allowed for some finer, albeit unnecessary, customisation of the viewport. However it is unlikely that this will have any impact on users who typically rely on setting the <code>CCSceneResolutionPolicy</code> during initialisation. In fact, the existence of two distinct resolution policies for <code>CCScene</code> and <code>CCViewport</code> was likely to cause some confusion to users, which was one of the motivations for its removal.
 
## Fixes and enhancements 
 ---
* [48](https://github.com/mono/CocosSharp/issues/48) Add Default Projection property
* [47](https://github.com/mono/CocosSharp/issues/47) CCLayer: Add constructor to specify camera projection
* [46](https://github.com/mono/CocosSharp/issues/46) iOS: CCMusicPlayer: Volume ignored when opening a file
* [44](https://github.com/mono/CocosSharp/issues/44) iOS: BackgroundMusicVolume has no effect
* [43](https://github.com/mono/CocosSharp/issues/43) AnimationInterval on CCWindow not working
* [42](https://github.com/mono/CocosSharp/issues/42) Add new Xamarin Studio template for Mac projects
* [41](https://github.com/mono/CocosSharp/issues/41) CCLabelBMFont positioning when using constructor specifying width
* [40](https://github.com/mono/CocosSharp/issues/40) iOS: If only landscape orientation is enabled, app with a wrong window position
* [39](https://github.com/mono/CocosSharp/issues/39) iOS: Errors when changing orientation
* [38](https://github.com/mono/CocosSharp/issues/38) Remove superfluous CCViewportResolutionPolicy
* [36](https://github.com/mono/CocosSharp/issues/36) CCLabelBMFont: ContentSize is 0x0 during initialisation
* [32](https://github.com/mono/CocosSharp/issues/32) Error calling CCApplication with no size
* [30](https://github.com/mono/CocosSharp/issues/30) CCSceneResolutionPolicy.ShowAll not behaving correctly
* [26](https://github.com/mono/CocosSharp/issues/26) Android app crashes when started in landscape mode but the app requires portrait mode
* [23](https://github.com/mono/CocosSharp/issues/23) CCLabelBMFont: Unable to run CCAction on label
* [20](https://github.com/mono/CocosSharp/issues/20) Visible bounds not perfectly matching default set by DesignResolutionSize
* [18](https://github.com/mono/CocosSharp/issues/18) Add new Xamarin Studio template for Android projects
* [17](https://github.com/mono/CocosSharp/issues/17) Add new Xamarin Studio template for iOS projects
# CocosSharp v1.3.1.0 release notes

## Breaking changes 
 ---
* None

## Key new features
 ___
* iOS Unified API support

## Fixes and enhancements 
 ---
* [110](https://github.com/mono/CocosSharp/issues/110) Mac CocosSharp pipeline extensions.
* [106](https://github.com/mono/CocosSharp/issues/106) ActionManagerTest crashes.
* [105](https://github.com/mono/CocosSharp/issues/105) Mac: When the app is in background, events are stopped, but Draw() not
* [104](https://github.com/mono/CocosSharp/issues/104) CCGrid3DAction: Grid Texture size incorrect
* [101](https://github.com/mono/CocosSharp/issues/101) Tilemap NRE error
* [100](https://github.com/mono/CocosSharp/issues/100) Windows OpenGL, OpenTK context exception on close
* [99](https://github.com/mono/CocosSharp/issues/99) Need some way to distribute CocosSharp pipeline extensions.
* [98](https://github.com/mono/CocosSharp/issues/98) Update to Xamarin iOS Unified API
* [96](https://github.com/mono/CocosSharp/issues/96) Interface for custom CCLog developer implementation
* [95](https://github.com/mono/CocosSharp/issues/95) Enhance CCSprite() to handle Content not being found
* [94](https://github.com/mono/CocosSharp/issues/94) Initialise CCScene.SetDefaultDesignResolution on creation of CCApplicationDelegate
* [91](https://github.com/mono/CocosSharp/issues/91) Example of using new TileMap's ClosestTileCoordAtNodePosition
* [74](https://github.com/mono/CocosSharp/issues/74) CCLabel: gracefully handle missing fonts
* [72](https://github.com/mono/CocosSharp/issues/72) Add error message (exception?) when textures and sprite fonts are missing
* [19](https://github.com/mono/CocosSharp/issues/19) Update Nuspec's to support Xamarin unified API
# CocosSharp v1.6.2.0 release notes 

Maintenance release to fix critical performance bug

## Fixes and enhancements 
 ---
* [316](https://github.com/mono/CocosSharp/issues/316) CCDrawManager: DrawQuads much slower compared to DrawQuad

# CocosSharp v1.7.0.0-pre1: Embeddable game view and Xamarin.Forms support

One of the most highly sought after features requested by users was the ability to integrate a CocosSharp game within a Xamarin.Forms application. Specifically, users were after a way to incorporate Xamarin.Forms controls alongside an embeddable game view that does not necessarily occupy the entire screen.

Unfortunately, due to a variety of limitations imposed by our dependencies, prior to CocosSharp 1.7.0.0, such functionality was previously not possible. Hence, to realise our goal, we have had to start from the ground-up and substantially redesign how a CocosSharp game is initialised.

## The end of CCApplication &mdash; introducing the new CCGameView
 ---
Users of CocosSharp will be familiar with <code>CCApplication</code>'s role in kick-starting their game. For example, on iOS, we would do the following:

<pre>
<code>
    class Program : NSApplicationDelegate 
    {
        public override void DidFinishLaunching (MonoMac.Foundation.NSNotification notification)
        {

            CCApplication application = new CCApplication(false, new CCSize(1024f, 768f));
            
            // GameAppDelegate is a subclass of CCApplicationDelegate, a container class for loading the game scene
            application.ApplicationDelegate = new GameAppDelegate();

            application.StartGame();
        }

        ....
</code>
</pre>

The problem implicit in this setup was that <code>CCApplication</code> took full control over your application, insisting that your game view was not only full-screen but that it was the sole, root view displayed.

In CocosSharp 1.7.0.0, we have replaced <code>CCApplication</code> with the new <code>CCGameView</code> class that serves the dual role of both setting up your game as well as rendering your game content. Depending on the targeted platform, <code>CCGameView</code> inherits from a corresponding native view class as showcased below:

![CCGameView](https://raw.githubusercontent.com/mono/CocosSharp/forms_support/ReleaseNotes/FormsNotesContent/gameview_stack.png "Design of CCGameView")

The benefit of this design is that now a user simply treats <code>CCGameView</code> as they would any other native view. In particular, that means that on iOS, a <code>CCGameView</code> can now be specified within a <code>.xib</code>, while on Android we can make use of our resource <code>.axml</code> and similarly on WindowsPhone setup our view within a <code>.xaml</code>. For instance, a simple Android layout resource file for an activity with a game view could be 

<pre>
<code>
&lt; ?xml version="1.0" encoding="utf-8"? /&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent" &gt;
&lt;CocosSharp.CCGameView
     android:id="@+id/GameView"
     android:layout_width="fill_parent"
     android:layout_height="fill_parent" /&gt;
&lt;/LinearLayout&gt;
</code>
</pre>

Overall, we now have a much more natural and cohesive setup for your game, and importantly users can not only specify the dimensions of their view, but <em>when</em> their game view appears within their application.	



## Replacing CCApplicationDelegate with the ViewCreated event
 ---
As highlighted in the previous section, a <code>CCApplication</code> instance was paired with a corresponding <code>CCApplicaitonDelegate</code> that was in charge of loading your game content. For example,

<pre>
<code>
    public class GameAppDelegate : CCApplicationDelegate
    {
        public override void ApplicationDidFinishLaunching (CCApplication application, CCWindow mainWindow)
        {
            // Specify default world dimensions
            CCScene.SetDefaultDesignResolution(1024.f, 768.f, CCSceneResolutionPolicy.ShowAll);
            
            CCScene scene = new CCScene (mainWindow);
            
            // Setup your scene
            // ...
            
            mainWindow.RunWithScene (scene);
        }
    }
</code>
</pre>

With the introduction of the new <code>CCGameView</code> we have removed this cumbersome approach of subclassing <code>CCApplicationDelegate</code>, replacing it with the <code>CCGameView</code> event <code>ViewCreated</code>, which users hook up to in order to initialise their game content. So for example, on iOS, for a game view associated with a custom view controller we could do the following,

<pre>
<code>
    [Register ("ViewController")]
    partial class ViewController
    {
        [Outlet]
        CocosSharp.CCGameView GameView { get; set; }

        ...
</code>
</pre>  

and subsequently a user would then hook up to the <code>ViewCreated</code> event

<pre>
<code>
public partial class ViewController : UIViewController
{
    public override void ViewDidLoad ()
    {
        base.ViewDidLoad ();

        if (GameView != null) {
            // Set loading event to be called once game view is fully initialised
            GameView.ViewCreated += LoadGame;
        }
        
        // Called once the game view has been fully initialised
        void LoadGame (object sender, EventArgs e)
        {
            CCGameView gameView = sender as CCGameView;

            if (gameView != null) {
                
                // Set world dimensions
                gameView.DesignResolution = new CCSizeI (1024, 768);

                gameView.ContentManager.SearchPaths = new List<string> () { "Fonts", "Sounds", "Images" };

                CCScene gameScene = new CCScene (gameView);
                gameScene.AddLayer (new GameLayer ());
                gameView.RunWithScene (gameScene);
            }
        }
    }

    ....
</code>
</pre>

Similarly, for an Android app, connecting to <code>ViewCreated</code> would be performed during the corresponding activity's initialisation,

<pre>
<code>
    public class MainActivity : Activity
    {
        protected override void OnCreate (Bundle bundle)
        {
            base.OnCreate (bundle);

            // Set our view from the "main" layout resource
            SetContentView (Resource.Layout.Main);

            // Get our game view from the layout resource,
            // and attach the view created event to it
            CCGameView gameView = (CCGameView)FindViewById (Resource.Id.GameView);
            
            if (gameView != null)
                gameView.ViewCreated += LoadGame;
        }

        void LoadGame (object sender, EventArgs e)
        {
            // Same as above
        }
        
    ....
</code>
</pre>

while finally on WindowsPhone, a custom <code>Page</code> with a xaml-specified game view would be setup within the constructor

<pre>
<code>
    public sealed partial class MainPage : Page
    {
        public MainPage ()
        {
            this.InitializeComponent ();

            if (GameView != null)
                GameView.ViewCreated += LoadGame;
        }

        void LoadGame (object sender, EventArgs e)
        {
            // Same as above
        }
    
    ....
</code>
</pre>


## CocosSharpView for Xamarin.Forms
 ---
We have also introduced the new custom Xamarin.Forms View <code>CocosSharpView</code>, whose custom view renderers are built on top of our <code>CCGameView</code> stack as highlighted below

![CocosSharpView](https://raw.githubusercontent.com/mono/CocosSharp/forms_support/ReleaseNotes/FormsNotesContent/forms_stack.png "Design of CocosSharpView")

Initialising a <code>CocosSharpView</code> is just as easy as creating any other Xamarin.Forms control:

<pre>
<code>
public class GamePage : ContentPage
{
    CocosSharpView gameView;

    public GamePage ()
    {
        gameView = new CocosSharpView () {
            HorizontalOptions = LayoutOptions.FillAndExpand,
            VerticalOptions = LayoutOptions.FillAndExpand,
            // Set the game world dimensions
            DesignResolution = new Size (1024, 768),
            // Set the method to call once the view has been initialised
            ViewCreated = LoadGame
        };

        Content = gameView;
    }

    void LoadGame (object sender, EventArgs e)
    {
        var nativeGameView = sender as CCGameView;

        if (nativeGameView != null) {
            // As in past examples
        }
    }

    ....

</code>
</pre>

## Limitations
 ---
Firstly, please be aware that for our initial prerelease, CocosSharp 1.7.0.0-pre1, we have reduced the scope of our package **to only target iOS, Android or Windows Phone 8.1 projects**. In subsequent releases, we will broaden the range of platforms supported.

More importantly, despite all the advances that are introduced by the new <code>CCGameView</code> class, there are still some constraints imposed by our dependencies. In particular, while a user can create, destroy and subsequently recreate multiple instances of a <code>CCGameView</code>, **currently we do not support the ability to have multiple <em>concurrent</em> <code>CCGameView</code> instances. In other words, for a given ViewController, Activity, Page etc., there can only be one <code>CCGameView</code> active at any point in time.**

## Will I necessarily need Xamarin.Forms to make use of these new features?
 ---
No. To make it perfectly clear &mdash; <code>CCGameView</code> is a native view implementation, meaning that you're free to incorporate this class within a native iOS, Android or WindowsPhone project. 

For Xamarin.Forms users, the benefit of using the Forms-specific <code>CocosSharpView</code> lies in the ability to specify all the UI elements of your game within a single, cross-platform project. 

## And remember...
 ---
as a prerelease we'll be constantly looking to fix and improve what is a substantial redesign &mdash; something that is only possible with your support and feedback.
# CocosSharp v1.7.1.0 release notes 

## Key new features
---

* Bringing our v1.7.0.0 pre-release to stable. The pre-release was causing users some grief with respect to accessibility of both the packages and corresponding project templates. Hopefully, this should now be rectified.

* A few minor enhancements and bug fixes

## Fixes and enhancements 
 ---
* [345](https://github.com/mono/CocosSharp/issues/345) CCDrawNode: Add ability to set BufferSize
* [344](https://github.com/mono/CocosSharp/pull/344) Fixed argument name typo &mdash; thanks to [Therzok](https://github.com/gdwneo)
* [343](https://github.com/mono/CocosSharp/issues/343) Rendering problem with CCGeometryNode and large (> short.MaxValue) geometry instance sets
* [341](https://github.com/mono/CocosSharp/issues/341) CCNodeGrid: Implement IDisposable
* [340](https://github.com/mono/CocosSharp/issues/340) CCRenderTexture: Implement IDisposable
* [338](https://github.com/mono/CocosSharp/issues/338) CCTileMap: Add HalfTexelOffset property
* [337](https://github.com/mono/CocosSharp/issues/337) Unable to load Tiled TMX file using ZLIB base64 encoded data nodes
* [335](https://github.com/mono/CocosSharp/issues/335) Tiled tile map artifacts when resized 2x,3x etc.
* [334](https://github.com/mono/CocosSharp/issues/334) CCTransitionFadeTR causes crash
* [330](https://github.com/mono/CocosSharp/issues/330) CC 1.7.0 on WinPhone8.1 on Actual Device (lumia 520) GraphicProfile HiDef error
* [328](https://github.com/mono/CocosSharp/issues/328) iOS/Mac: CCMusicPlayer: Replace AVFoundation with MonoGame implementation
* [326](https://github.com/mono/CocosSharp/issues/326) CCSpriteSheet loading issues when using SpriteKit texture atlas
* [325](https://github.com/mono/CocosSharp/issues/325) [iOS] Rendering inconsistencies with CCLabel and .ttf
* [323](https://github.com/mono/CocosSharp/issues/323) Problem with event listeners not working when transitioning scenes.
* [320](https://github.com/mono/CocosSharp/issues/320) CCLabel with custom TrueType font not working on Android/iOS
* [313](https://github.com/mono/CocosSharp/issues/313) CCParticleSystem: Incorrect free emitter positioning
* [307](https://github.com/mono/CocosSharp/issues/307) CCSimpleAudioEngine: Resuming finished background music replays song
* [288](https://github.com/mono/CocosSharp/issues/288) Audio engine: Add ability to check if effects are playing# CocosSharp v1.7.0.0-pre1 release notes 

## All new embeddable game view and Xamarin.Forms support
 ---
You asked for it and we have delivered! In this prerelease, we have substantially changed the way a user initialises their game with the new <code>CCGameView</code> class that allows users to embed their game view within a native application. 

Additionally, Xamarin.Forms users are also covered with the new custom Forms view, <code>CocosSharpView</code>.

To get started, we strongly recommend reading more about these design changes [here](https://github.com/mono/CocosSharp/blob/forms_support/ReleaseNotes/Forms.md).

## Installing the prerelease packages
 ---
From v1.7.0.0-pre1 onwards, two packages will be made available to users &mdash; <code>CocosSharp</code> and <code>CocosSharp.Forms</code>, with the latter package required for Xamarin.Forms users.

Please keep in mind that as this is currently a prerelease, your NuGet package manager may not be immediately able to locate these packages. In particular, in Xamarin Studio, make sure to tick the <em>Show pre-release packages</em> option when adding packages, while in Visual Studio's package manager, ensure that you change the dropdown box from <em>Stable only</em> to <em>Include Prerelease</em>.

## Project templates
 ---
We have also updated our suite of Xamarin Studio and Visual Studio project templates to reflect the changes in initialisation. Remember, to install these templates for Xamarin Studio and Visual Studio refer to the guides [here](http://forums.xamarin.com/discussion/26822/cocossharp-project-templates-for-xamarin-studio) and [here](http://forums.xamarin.com/discussion/30701/cocossharp-project-templates-for-visual-studio) respectively. 

## Samples
 ---
Over the next few weeks, we will be updating the CocosSharp samples repository [<code>xamarin_forms</code>](https://github.com/mono/cocos-sharp-samples/tree/xamarin_forms) branch to incorporate both the new embeddable native and Xamarin.Forms views, as well as modernising the code-base to reflect other API changes and more generally polishing up the quality of these samples.

## Pitfalls
 ---
* The design document [here](https://github.com/mono/CocosSharp/blob/forms_support/ReleaseNotes/Forms.md) covers some of the limitations of using the new <code>CCGameView</code>.

* Additionally, for Xamarin.Forms users targeting the Android platform, please ensure that you're *__compile target is set to API 23 (6.0).__* 

## Other breaking changes
 ---

* __Fixed Content directory:__ We have fixed the location for where the Content root directory should reside to be in the folder <em>Content</em>.  In practice, providing the users with this flexibility to specify the location gained them nothing and, in the worse case, forgetting to set the root directory resulted in a missing content exception being thrown. So just like other platform-specific resource files, there’s a consistent location where content should reside and a user doesn’t have to worry about specifying it during initialisation.

* __CCSimpleAudioEngine has been marked as obsolete and replaced with CCAudioEngine:__ Currently, <code>CCSimpleAudioEngine</code> is under the <code>CocosDenshion</code> namespace while all other classes reside within <code>CocosSharp</code>. This resulted in the odd situation where users were required to import this additional namespace to use audio. Hence, we have moved to replace <code>CCSimpleAudio</code> with <code>CCAudioEngine</code> which resides in <code>CocosSharp</code>.

* __CCScene: AddChild has been marked obsolete and replaced with the AddLayer:__  In an attempt to further differentiate the roles of <code>CCScene</code> and <code>CCLayer</code>, we have replaced the CCScene:AddChild(CCNode) method with CCScene:AddLayer(CCLayer) to emphasise that a scene’s sole role is to house game layers. In subsequent releases, we will move to make this type-safe, so that a user is unable to add nodes that aren’t layers to a scene.

## Other fixes and enhancements 
 ---
* [319](https://github.com/mono/CocosSharp/pull/319) [wp81] fix for CCUserDefaults.Flush corrupting files &mdash; thanks to [alexsorokoletov](https://github.com/alexsorokoletov)
* [318](https://github.com/mono/CocosSharp/pull/318) Update mono path to reflect el capitan &mdash; thanks to [Therzok](https://github.com/Therzok)
* [317](https://github.com/mono/CocosSharp/pull/317) Fixed typographical error, changed aggresive to aggressive in README &mdash; thanks to [orthographic-pedant](https://github.com/orthographic-pedant)
* [223](https://github.com/mono/CocosSharp/issues/223) Assigning CCLayer.Viewport throws uninformative exception
* [64](https://github.com/mono/CocosSharp/issues/64) Significant Stutter on Android
# CocosSharp v1.4.0.0 release notes

## Breaking changes 
 ---

* Changes to CCLog custom logging interface as described [here](https://github.com/mono/CocosSharp/wiki/Logging)
* Please also see details of Unified labels for future breaking changes

## Key new features
 ---
### Unified labels

The previous support for labels was disjoint and offered inconsistent behaviour across different formats/platforms. Motivated by a desire to do away with these issues, we now offer a single point of control for creating bitmap, sprite and system fonts -- namely, <code>CCLabel</code>, where the desired format is specified within the constructor. For example, 

<pre>
<code>
// CCLabel Sprite Font
var label1 = new CCLabel("Hello SpriteFont", "fonts/arial", 26, CCLabelFormat.SpriteFont);

// CCLabel Bitmap Font - No need to pass a CCLabelFormat because the default for this constructor is BitmapFont
var label2 = new CCLabel("Hello Bitmap Font", "fonts/bitmapFontTest3.fnt");

// CCLabel using the system font Arial
var label3 = new CCLabel("Hello System Font", "Arial", 20, CCLabelFormat.SystemFont);

// CCLabel using the MorrisRoman-Black.ttf font included as content in the fonts folder
var label4 = new CCLabel("Hello MorrisRoman-Black", "fonts/MorrisRoman-Black.ttf", size, CCLabelFormat.SystemFont)
</code>
</pre>

Note, that while the now obsolete <code>CCLabelBMFont</code> and <code>CCLabelTtf</code> classes remain in this release, to avoid confusion, we will aim to remove these classes entirely in subsequent releases. Thus it is recommended that users migrate their existing code-base to use unified labels as soon as possible. 

Further in-depth details on the features of the new unified <code>CCLabel</code> implementation can be found [here](https://github.com/mono/CocosSharp/wiki/Labels).

Also, a special thanks to René Ruppert for testing and putting the new labels through their paces!

 ---
### Beefed up tile map support

Some great new features for our [Tiled](http://www.mapeditor.org) tile map support including

* support for CSV and xml encoded tile maps
* support for TMX-specified tile animations
* support for staggered isometric tile map types
* a more robust and faster tile-map renderer (tile visibility culling and support for very large tile maps)



## Fixes and enhancements 
 ---
* [172](https://github.com/mono/CocosSharp/issues/172) Windows Phone 8.1 support with Nugets
* [171](https://github.com/mono/CocosSharp/issues/171) CCLog could be made simpler by not having an interface
* [170](https://github.com/mono/CocosSharp/issues/170) CCTileMap: Add support for reading TileMap with CSV encoding
* [169](https://github.com/mono/CocosSharp/issues/169) CCTileMapLayer: Add support for animated tiles specified in TMX
* [168](https://github.com/mono/CocosSharp/issues/168) CCFadeOutBLTiles leaks memory
* [166](https://github.com/mono/CocosSharp/issues/166) CCLabel leaks memory
* [165](https://github.com/mono/CocosSharp/issues/165) CCTileMap.TilePropertiesForGID should not throw a KeyNotFoundException when passing a GID - it should return null
* [158](https://github.com/mono/CocosSharp/issues/158) CCEmitterMode not longer able to be set but also no way to set it for ParticleSystems on creation.
* [156](https://github.com/mono/CocosSharp/pull/156) Fixed a bug where TouchesEnabled does not work correctly. --- thanks to [Tonisson](https://github.com/Tonisson)
* [155](https://github.com/mono/CocosSharp/issues/155) Tiled map with object layer causes index out of range exception on ios
* [154](https://github.com/mono/CocosSharp/issues/154) Enhance CCDrawNode with the ability to draw Ellipses
* [152](https://github.com/mono/CocosSharp/issues/152) CCTileMap incorrectly uses the first tileset for all layers
* [151](https://github.com/mono/CocosSharp/pull/151) Cc tile map polylines and shapes --- thanks to [charliekilian](https://github.com/charliekilian)
* [149](https://github.com/mono/CocosSharp/issues/149) iOS: System Japanese font character width/x-advance is too large
* [148](https://github.com/mono/CocosSharp/issues/148) CCTileMap: Elegantly handle drawing of tile map with vertices > 65535 --- thanks to [charliekilian](https://github.com/charliekilian)
* [138](https://github.com/mono/CocosSharp/issues/138) CommonHeight property exposed on Labels
* [137](https://github.com/mono/CocosSharp/issues/137) Attribute of CCLabel that tells me the exact rendered size of my label
* [136](https://github.com/mono/CocosSharp/issues/136) TestFlight won't accept the binary without the 64 bit support.
* [128](https://github.com/mono/CocosSharp/issues/128) CCMenuItem doesn't trigger Action target (for example void OnClick(T obj) { ... }) in arm64 architecture 
* [92](https://github.com/mono/CocosSharp/issues/92) CCTileMapLayer :  Fix Hexagonal tile map transformation
* [76](https://github.com/mono/CocosSharp/issues/76) CCLabel: border artefacts when initially rendering characters
* [75](https://github.com/mono/CocosSharp/issues/75) CCLabel: robust handling of font filenames
* [73](https://github.com/mono/CocosSharp/issues/73) Allow more flexibility in referencing sprite font XNBs
* [37](https://github.com/mono/CocosSharp/issues/37) Unified labels
* [13](https://github.com/mono/CocosSharp/issues/13) Fast tile map rendering with culling support
* [9](https://github.com/mono/CocosSharp/issues/9) Add support in TMX parser for isometric(staggered) map types
To build this project in batch

Execute the following:
msbuild GameStarterKitInstaller.sln /p:Configuration=Release

Example:
CocosSharp\ProjectTemplates\GameStarterKit\VSIX\GameStarterKitInstaller>msbuild GameStarterKitInstaller.sln /p:Configuration=ReleaseTo build a new version you will need to update the .nupkg reference to the updated version of Cocos2D-XNA.Windows.<version>.nupkg

1. In GameStarterKitInstaller add a folder named "packages" if it does not already exist.
2. On "packages" folder: Add->Existing item. Find Cocos2D-XNA.Windows.<version>.nupkg and make sure to "Add as Link".
3. In the Properties grid for the Cocos2D-XNA.Windows.<version>.nupkg file set Build Action=Content & Include in VSIX=True
(this step causes the nupkg to be packaged in the VSIX in the packages subfolder where the template wizard expects to find the file)
4. Make sure that the version of the package is updated:
	a) Open the linked to file GameStarterKit.Windwos.vstemplate that is linked to within this project
	b) Change the version of the  <package id="Cocos2D-XNA.Windows" version="2.0.3.2" /> tag to the correct version to include.

   <packages repository="extension"
          repositoryId="GameStarterKitInstaller.852d8d2b-8ddc-4fd2-8312-53657ec6dfa3">
      <package id="Cocos2D-XNA.Windows" version="2.0.3.2" />
    </packages>

5. After modifying the template in step 4. above you will need to repackage the template:
	a) Delete the *.zip files in the Template Directory for the project that you are packaging
	b) Select all files in the directory and then Send To Compressed File - Name it GameStarterKit.Windows.zip ** Note ** Make sure it is in the bin directory
	
6. Ctrl+F5 to launch a test instance of VS, create a new project using the Cocos2D-XNA template that shows up that should now show up. Success!!
 

To build this project in batch

Execute the following:
msbuild GameStarterKitInstaller.sln /p:Configuration=Release

Example:
CocosSharp\ProjectTemplates\GameStarterKit\VSIX\GameStarterKitInstaller>msbuild GameStarterKitInstaller.sln /p:Configuration=ReleaseAny raw assets you want to be deployed with your application can be placed in
this directory (and child directories) and given a Build Action of "AndroidAsset".

These files will be deployed with you package and will be accessible using Android's
AssetManager, like this:

public class ReadAsset : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		InputStream input = Assets.Open ("my_asset.txt");
	}
}

Additionally, some Android functions will automatically load asset files:

Typeface tf = Typeface.CreateFromAsset (Context.Assets, "fonts/samplefont.ttf");Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.xml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable-hdpi/
        icon.png

    drawable-ldpi/
        icon.png

    drawable-mdpi/
        icon.png

    layout/
        main.xml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called
"Resource" that contains the tokens for each one of the resources included. For example, 
for the above Resources layout, this is what the Resource class would expose:

public class Resource {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or Resource.layout.main 
to reference the layout/main.xml file, or Resource.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.Any raw assets you want to be deployed with your application can be placed in
this directory (and child directories) and given a Build Action of "AndroidAsset".

These files will be deployed with you package and will be accessible using Android's
AssetManager, like this:

public class ReadAsset : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		InputStream input = Assets.Open ("my_asset.txt");
	}
}

Additionally, some Android functions will automatically load asset files:

Typeface tf = Typeface.CreateFromAsset (Context.Assets, "fonts/samplefont.ttf");Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.xml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable-hdpi/
        icon.png

    drawable-ldpi/
        icon.png

    drawable-mdpi/
        icon.png

    layout/
        main.xml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called
"Resource" that contains the tokens for each one of the resources included. For example, 
for the above Resources layout, this is what the Resource class would expose:

public class Resource {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or Resource.layout.main 
to reference the layout/main.xml file, or Resource.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.Any raw assets you want to be deployed with your application can be placed in
this directory (and child directories) and given a Build Action of "AndroidAsset".

These files will be deployed with you package and will be accessible using Android's
AssetManager, like this:

public class ReadAsset : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		InputStream input = Assets.Open ("my_asset.txt");
	}
}

Additionally, some Android functions will automatically load asset files:

Typeface tf = Typeface.CreateFromAsset (Context.Assets, "fonts/samplefont.ttf");Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.xml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable-hdpi/
        icon.png

    drawable-ldpi/
        icon.png

    drawable-mdpi/
        icon.png

    layout/
        main.xml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called
"Resource" that contains the tokens for each one of the resources included. For example, 
for the above Resources layout, this is what the Resource class would expose:

public class Resource {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or Resource.layout.main 
to reference the layout/main.xml file, or Resource.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.Any raw assets you want to be deployed with your application can be placed in
this directory (and child directories) and given a Build Action of "AndroidAsset".

These files will be deployed with you package and will be accessible using Android's
AssetManager, like this:

public class ReadAsset : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		InputStream input = Assets.Open ("my_asset.txt");
	}
}

Additionally, some Android functions will automatically load asset files:

Typeface tf = Typeface.CreateFromAsset (Context.Assets, "fonts/samplefont.ttf");Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.xml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable-hdpi/
        icon.png

    drawable-ldpi/
        icon.png

    drawable-mdpi/
        icon.png

    layout/
        main.xml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called
"Resource" that contains the tokens for each one of the resources included. For example, 
for the above Resources layout, this is what the Resource class would expose:

public class Resource {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or Resource.layout.main 
to reference the layout/main.xml file, or Resource.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.Any raw assets you want to be deployed with your application can be placed in
this directory (and child directories) and given a Build Action of "AndroidAsset".

These files will be deployed with you package and will be accessible using Android's
AssetManager, like this:

public class ReadAsset : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		InputStream input = Assets.Open ("my_asset.txt");
	}
}

Additionally, some Android functions will automatically load asset files:

Typeface tf = Typeface.CreateFromAsset (Context.Assets, "fonts/samplefont.ttf");Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.xml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable-hdpi/
        icon.png

    drawable-ldpi/
        icon.png

    drawable-mdpi/
        icon.png

    layout/
        main.xml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called
"Resource" that contains the tokens for each one of the resources included. For example, 
for the above Resources layout, this is what the Resource class would expose:

public class Resource {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or Resource.layout.main 
to reference the layout/main.xml file, or Resource.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.Copyright (c) 2010-2012 cocos2d-x.org

Copyright (c) 2008-2010 Ricardo Quesada
Copyright (c) 2011      Zynga Inc.
Copyright (c) 2011-2012 openxlive.com
Copyright (c) 2012      Totally Evil Entertainment, LLC
Copyright (c) 2012      Gena Minchuk
Copyright 2012 Xamarin Inc

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
Simple Cocos2D-XNA Template Wizard

The purpose of the wizard is to pass the root project name down to the Test
and Web projects, so that references and links may be specified.

This assembly must be signed.

Generate a test template.
CocosSharp\ProjectTemplates\Installers\Cocos2DXNATemplateWizard\Cocos2DXNATemplateWizard\bin\Release>sn -T Cocos2DXNATemplateWizard.dll


Cocos2DSNATemplate.pfx - password is CocosSharp
#
# Building CocosSharp project templates add-in for Xamarin Studio / MonoDevelop
#

1. Place built CococSharp NuGet packages into Packages/

As this add-in is only targeting Mac/Mobile devices, you can omit including Windows-specific NuGets.

2. Within the directory of the addin xml run:

[Location of MonoDevelop or Xamarin Studio]/Xamarin\ Studio.app/Contents/MacOS/mdtool setup pack MonoDevelop.CocosSharp.addin.xmlAny raw assets you want to be deployed with your application can be placed in
this directory (and child directories) and given a Build Action of "AndroidAsset".

These files will be deployed with your package and will be accessible using Android's
AssetManager, like this:

public class ReadAsset : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		InputStream input = Assets.Open ("my_asset.txt");
	}
}

Additionally, some Android functions will automatically load asset files:

Typeface tf = Typeface.CreateFromAsset (Context.Assets, "fonts/samplefont.ttf");
Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.axml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable/
        icon.png

    layout/
        main.axml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called "R" 
(this is an Android convention) that contains the tokens for each one of the resources 
included. For example, for the above Resources layout, this is what the R class would expose:

public class R {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or R.layout.main 
to reference the layout/main.axml file, or R.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.
Any raw assets you want to be deployed with your application can be placed in
this directory (and child directories) and given a Build Action of "AndroidAsset".

These files will be deployed with your package and will be accessible using Android's
AssetManager, like this:

public class ReadAsset : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		InputStream input = Assets.Open ("my_asset.txt");
	}
}

Additionally, some Android functions will automatically load asset files:

Typeface tf = Typeface.CreateFromAsset (Context.Assets, "fonts/samplefont.ttf");
Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.axml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable/
        icon.png

    layout/
        main.axml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called "R" 
(this is an Android convention) that contains the tokens for each one of the resources 
included. For example, for the above Resources layout, this is what the R class would expose:

public class R {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or R.layout.main 
to reference the layout/main.axml file, or R.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.
To build the .nuspec 
====================

There are two ways to build the .nuspec, via command line or 

Creating Packages Using the NuGet Command Line
--------------------

- 1) Open a command prompt and navigate to an empty folder. 
- 2) Make sure the nuget.exe file can be found, and run the following command:
	
	NuGet.exe pack Cocos2D.Windows.nuspec -OutputDirectory "bin"

** Note ** make sure to add the -OutputDirectory "bin" to keep them from git`s view or they will be committed to the repo.  If necassary create the bin directory as well.

Creating Packages using NuGet Package Explorer
--------------------

- 1) Load the package up in the NuGet Package Explorer
- 2) Modify what you want
- 3) Save the new .nupkg in the bin file

SharpZipLib
-----------

Original source files from github : https://github.com/icsharpcode/SharpZipLib

Webpage for this library is here: http://icsharpcode.github.io/SharpZipLib/

CocosSharp uses this library's source code to implement Zip decompression from streams loaded from external configuration files like Tiled.

The sources have been modified from the original source only to mark the `public` accessors as `internal` so that
the PCL API and CocosSharp assemblies that we provide do not allow access to these modules externally.  Other than that 
there are no modifications to original functionality.
Copyright (c) 2006-2010 Erin Catto http://www.gphysics.com
Copyright (c) 2013 - Totally Evil Entertainment

This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
claim that you wrote the original software. If you use this software
in a product, an acknowledgment in the product documentation would be
appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.

This version of box2d was developed by Totally Evil Entertainment, LLC. It is
based upon the original C++ code written by Erin Catto.

Box2D Version 2.2.1

Welcome to Box2D!

Box2D is a 2D physics engine for games.

For help with Box2D, please visit http://www.box2d.org. There is a forum there where you may post your questions.

For specific questions about the C# version found in this repository, please use the forums
at http://cocos2dxna.codeplex.com.

Any raw assets you want to be deployed with your application can be placed in
this directory (and child directories) and given a Build Action of "AndroidAsset".

These files will be deployed with you package and will be accessible using Android's
AssetManager, like this:

public class ReadAsset : Activity
{
	protected override void OnCreate (Bundle bundle)
	{
		base.OnCreate (bundle);

		InputStream input = Assets.Open ("my_asset.txt");
	}
}

Additionally, some Android functions will automatically load asset files:

Typeface tf = Typeface.CreateFromAsset (Context.Assets, "fonts/samplefont.ttf");Images, layout descriptions, binary blobs and string dictionaries can be included 
in your application as resource files.  Various Android APIs are designed to 
operate on the resource IDs instead of dealing with images, strings or binary blobs 
directly.

For example, a sample Android app that contains a user interface layout (main.xml),
an internationalization string table (strings.xml) and some icons (drawable-XXX/icon.png) 
would keep its resources in the "Resources" directory of the application:

Resources/
    drawable-hdpi/
        icon.png

    drawable-ldpi/
        icon.png

    drawable-mdpi/
        icon.png

    layout/
        main.xml

    values/
        strings.xml

In order to get the build system to recognize Android resources, set the build action to
"AndroidResource".  The native Android APIs do not operate directly with filenames, but 
instead operate on resource IDs.  When you compile an Android application that uses resources, 
the build system will package the resources for distribution and generate a class called
"Resource" that contains the tokens for each one of the resources included. For example, 
for the above Resources layout, this is what the Resource class would expose:

public class Resource {
    public class drawable {
        public const int icon = 0x123;
    }

    public class layout {
        public const int main = 0x456;
    }

    public class strings {
        public const int first_string = 0xabc;
        public const int second_string = 0xbcd;
    }
}

You would then use R.drawable.icon to reference the drawable/icon.png file, or Resource.layout.main 
to reference the layout/main.xml file, or Resource.strings.first_string to reference the first 
string in the dictionary file values/strings.xml.